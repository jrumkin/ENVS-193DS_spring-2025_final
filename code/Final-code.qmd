---
title: "Final-code"
author: "Jessi Rumkin"
date: "June 11, 2025"
format:
  html:
    toc: true # to display a table of contents
execute:
  message: false # make sure messages don't show up
  warning: false # make sure warnings don't show up
---

link to GitHub repo: <https://github.com/jrumkin/ENVS-193DS_spring-2025_final>

# Set Up

```{r}
#read in packages
library(tidyverse)
library(janitor) #package for cleaning data
library(here) #for file management
library(ggeffects) #package for prediction model
library(DHARMa) #for model diagnostics
library(MuMIn) #for AICc best model
library(scales) #used for manual axis customization 

#read in data used for assignment
sst <- read.csv(here("data", "SST_update2023.csv")) #using package 'here' to fix file path issue

nest_boxes <-  read.csv(here("data", "occdist.csv")) #using 'here' to fix file path render issue

```

# Problem 1. Research Writing

## a. Transparent statistical methods

In part 1 they used Pearson's correlation test. In part 2 they used a one way ANOVA test.

## b. More information needed

An additional piece of information that should be given is the type of statistical test that was ran in both parts so the reader can use that to learn about the data type and assumptions made.

An additional test that could be performed is a eta squared test in order to quantify the effect size between groups. This increases data transparency and helps the reader understand the result.

## c. Suggestions for rewriting

We found a **effect size** (eta^2^ = **value**) correlation between distance from headwater (km) and annual total nitrogen load (kg year^-1^) (**Type of test**, **test variable**(**degree of freedom**) = **value**, p = 0.03, $\alpha$ = **significance level**).

We found a **effect size** (eta^2^ = **value**) difference in average nitrogen load (kg year^-1^) (**Type of t-test**, t(**degree of freedom**) = **t value**, p = 0.02, $\alpha$ = **significance level**) between sources (urban land n = **group sample size**, atmospheric deposition n = **group sample size**, fertilizer n = **group sample size**, wastewater treatment n = **group sample size**, and grasslands n = **group sample size**).

# Problem 2. Data Visualzation

## a. Cleaning and summarizing

Notes to myself on things that need to be done or be true abt the data table: 1. 72 rows total (this likley means each month has a row for all 6 years) 2. year data is factors not numbers 3. month data is ordinal factor data 4. the third column is mean sst (so I need to find the mean temp for each month in each year so like Aug 2018 is a different row than aug 2019)

```{r}

sst_clean <-  sst |> #new object called sst_clean from sst data
  mutate(date = ymd(date), #make the date column into year-month-date recognized data
         year = year(date), #make a new column of the year from the date column
         month = month(date)) |>  #make a new column of the month from the date column
  filter(year == c("2018", "2019", "2020", "2021", "2022", "2023")) |> #select only rows from those years 2018 - 2023
  select(year, month, temp) |> #select columns year, month, and temp
  group_by(year, month) |> #group the data by year and then month
  summarise(mean_monthly_sst = round((mean(temp, na.rm = TRUE)), 1)) |>  #calculate mean monthly sea surface temps in each month of each selected year
  mutate(year = as.factor(year)) |> #set year column as a factor
  mutate(month = factor(month.abb[month], #set the month column to factor using the abbreviated month names
                           levels = month.abb, #the levels of the ordinal factor are set my the month abbreviations
                           ordered = TRUE)) |>   #makes the factor ordinal
  ungroup() #ungroup the data to be worked with normally later
  
slice_sample(sst_clean, n = 5)  #display 5 random rows from sst_clean
str(sst_clean) #display sst_clean data structure


```

## b. Visualize the data

```{r}

sst_visual <- ggplot(data = sst_clean, # make a new object called sst_visual, use ggplot to make a visualization from data sst_clean
                     aes(x = month, # month on x axis
                         y = mean_monthly_sst, # temp on y axis
                         group = year,
                         color = year)) +
  geom_line() +
  geom_point() +
  scale_color_manual(name = "Year", 
                     values = c("2018" = "#DDADFE", #manually assign colors by group
                           "2019" = "#BB9AD3", 
                           "2020" = "#9A78B1", 
                           "2021" = "#785590", 
                           "2022" = "#523467", 
                           "2023" = "#2F193E" )) +
  theme_bw() +
  theme(panel.grid.major = element_blank(),   # remove major gridlines
        panel.grid.minor = element_blank(), #remove minor gridlines
        legend.position = c(.1, .7)) + #place the legend inside the plot, top left corner
  labs( x = "Month", #manual x axis label
        y = "Mean monthly sea surface temperature (°C)", #y axis manual lable
        legend = "Year") #manual legend name

sst_visual #print the visual


```

# Problem 3 Data analysis

```{r}
#| label: sneaky chunk
#| include: false

nest_clean <- nest_boxes |> #make an object called nest_clean
  clean_names() |> #clean the names to get rid of "."
  mutate(season = as.factor(season)) #make season a factor w/ 2 levels

nest_smaple <-  nest_clean |> #make a new object called nest_sampple
  count(season) #

nest_explore <- nest_boxes |> 
  clean_names() |>  #clean the names of columns to remove . and replace with _ 
  mutate(bin = cut(edge_distance, breaks = 10)) |> 
  group_by(bin) |> 
  mutate(prop_occupied = mean(sp),
            mid = mean(edge_distance)) |> 
  ungroup() |> 
  mutate(season = factor(season))

  ggplot(data = nest_explore,
         aes(x = mid, 
             y = prop_occupied)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE)



```

## a. Response variable

The 1s and 0s in the columns sp, cs, and tm represent the species type in each nest box observation for Swift Parrot, Common Starling, and Tree Martin respectively where a 1 means that species was observed and a 0 means it was another species or empty. The column e represents if the nest box was occupied or not, with a 1 meaning it was empty and a 0 meaning it was occupied.

## b. Purpose of study

Swift Parrots are unique because they are the focus bird for restoration purposes and they have unique nesting habits that make as little of 5% of the available area suitable for their nesting and they do not return to nesting sites of previous years. The other two species, Common Starlings and Tree Martins, are common and abundant in the study area and reported behavior of using nest boxes intended for other species.

## c. Difference in “seasons”

The study uses data on the summer breeding seasons for Swift Parrots of 2016 and of 2019. Data was collected in November and some in December in each study season, which coincided with the fledging period for Common Starlings, mid nestling period for Swift Parrots, and nest building for Tree Martins. Swift Parrots returned to the site which still had the nest boxes in 2019 because of a mast tree flowering event, and were otherwise not present at the study site.

## d. Table of models

| Model Number | Season | Distance to forest edge | Model description             |
|------------------|------------|-------------------|-------------------------|
| 1            |        |                         | No predictors (null)          |
| 2            | ✓      | ✓                       | Season + Distance (saturated) |
| 3            | ✓      |                         | Season only                   |
| 4            |        | ✓                       | Distance only                 |

## e. Run the models

```{r}

mod1 <-  glm(sp ~ 1, #null model #running a generalized linear model because the data is continuous against binary #making the models into object, this also prevents the output display
                   data = nest_clean,
                   family = "binomial") #specifies a binary response variable (Swift Parrot occupancy in the nest boxes)

mod2 <-  glm(sp ~ season + edge_distance, #saturated model with year and distance
             data = nest_clean,
             family = "binomial")

mod3 <- glm(sp ~ season, #model 3, season (year) only
            data = nest_clean,
            family = "binomial")

mod4 <-  glm(sp ~ edge_distance, #model 4, distance only
             data = nest_clean,
             family = "binomial")

```

## f. Check the diagnostics

```{r}
# Simulate residuals for each model
residuals1 <- simulateResiduals(mod1) #null
residuals2 <- simulateResiduals(mod2) #saturated 
residuals3 <- simulateResiduals(mod3) #season (year) only
residuals4 <- simulateResiduals(mod4) #distance only

#plotting each residuals model separately
plot(residuals1)
plot(residuals2)
plot(residuals3)
plot(residuals4)


```

## g. Select the best model

```{r}

AICc(mod1, #Akaike’s Information Criterion from the MuMIn package to choose the best model.
     mod2, #model 2 (saturated) gives the best predictions (lowest AIC score output)
     mod3,
     mod4) |> 
  arrange(AICc) # arranging output in descending order of AIC


```

Akaike’s Information Criterion defined the best model to be that Swift Parrot presence in the nest boxes is best predicted by considering the season and the distance to forest edge.

## h. Visualize the model predictions

```{r}

#visualize prediction showing underlying data and prediction data

model_prediction <- ggpredict(mod2, #make a new object of the model prediction made from ggpredict
                              terms = c("edge_distance [all]", "season"))  #predictions are made across the entire rand of diatances, and the "season" is being used to seperate data from 2016 and 2019
model_df <- as.data.frame(model_prediction) |> #make the model_prediction into a data frame useable by ggplot2
  rename(Season = group) #rename the "group" column into "season" (make legend easier)

ggplot(model_df, #using ggplot to add customizations and geometry layers to the plot
       aes(x = x,  #x axis is the distance to forest edge
           y = predicted, #y axis is predicted occupancy of swift parrots
           color = Season,  #data is colored by season(year)
           fill = Season)) + #data is filled by season(year)
  geom_ribbon(aes(ymin = conf.low, #add a ribbon geometry to represent the confidence interval at 95%
                  ymax = conf.high), 
              alpha = 0.25,  #make the ribbon 25% transparent
              color = NA) + #no outline color for the ribbons
  geom_line() + #adds a line between prediction points for legibility
  geom_jitter(data = nest_explore,  #underlying data points (binary occupancy) (minimal jitter the points for legibility and reduce overlap)
              aes(x = edge_distance, #x axis is distance
                  y = sp, #y axis is binary occupation data of swift parrots
                  color = season), #data is colored by the season
              inherit.aes = FALSE, #doesn't inherit aesthetics from original call on ggplot
              height = 0.02, #minimal height jitter to increase legibility
              alpha = 0.4, #makes the data  40% transparent
              size = 1, #manual size of the data 
              shape = 2) + #gives the data an open triangle shape to separate them from the prediction data points
  scale_color_manual(values = c("2016" = "#9544BF", "2019" = "#4465BF")) + #manual color for points and lines
  scale_fill_manual(values = c("2016" = "#9544BF", "2019" = "#4465BF")) + #manual color for ribbon fill
  scale_y_continuous(labels = percent_format(accuracy = 1)) +  #format y axis as % using scales package
  labs(x = "Distance to forest edge (m)", #manual labels for x axis
       y = "Probability of Swift Parrot box occupancy, #manual y axis label", #manual y axis
       title = "Swift Parrot Nest Box Occupancy and Predictions by Season" #manual title
       ) +
  theme_bw() + #base theme choice
  theme( #manual theme adjustments
        panel.grid.major = element_blank(),   # remove major grid lines
        panel.grid.minor = element_blank()  #remove minor grid lines
        )



```

## i. Write a caption for your figure

**Fig. 1 Swift Parrots have a higher probability of occupancy with less distance to forest edge.** Data from DRYAD "Do nest boxes breed the target species or its competitors? A case study of a critically endangered bird." https://doi.org/10.5061/dryad.83bk3j9sb The lines represent the predictions using the saturated generalized linear model and the ribbons represent the 95% confidence interval of the predictions. The triangle points represent binary occupancy data collected on Swift Parrots (2016 n = 104, 2019 n = 123) used to build the model predictions. The color represent data from each season with 2016 in purple and 2019 in blue.

## j. Calculate model predictions

```{r}
#| echo: true

ggpredict(mod2, #use ggpredict which automatically uses 95% confidence interval using mod2 which is the saturated model that had the lowest AIC
          terms = c("edge_distance [0]", "season")) #calculate prediction when distance = 0 meters for both seasons (years)

ggpredict(mod2, #use ggpredict which automatically uses 95% confidence interval using mod2 which is the saturated model that had the lowest AIC
          terms = c("edge_distance [900]", "season")) #calculate prediction when distance = 900 m for both seasons (years)


```

## k. Interpret your results

Probability of a Swift Parrot occupying a nest box is highest when the nest box is close to the forest edge (48% chance occupancy at any given box at 0 meters in 2016, 30% occupancy in 2019). The probability is much lower when the nest box is far from the forest edge (900 m from forest edge: 12% in 2016 and 6% in 2019). Swift Parrots rarely return to a previous nesting site, so their use of nest boxes declines over time. The other bird species present, Tree Martin and Common Starling, also both present dominant behavior over the Swift Parrot and will occupy the nests when the Swift Parrots are not present.

# Problem 4. Affective and exploratory visualizations

## a. Comparing visualizations

The visuals are quite different because the data visuals and purely about data the affective version is an artistic rendition of that data. Each data point became a representative doodle in order to give the viewer a sense of substance and beauty, and take the focus away from comparing the two groups.

My affective visualization matches the data pretty literally because the art is a representation of the same data. The exploratory visualization showed the mean productivity score and 95% confidence intervals for both groups, as well as the underlying data as a jitter plot. The affective visualization mirrored the jitter plot very closely for where the doodles would go.

I can see in both versions, but more clearly in the exploratory data, that I may have higher productivity when I work with other people, but I also have a larger spread of data acorss high and low productivity. The pattern is slightly obscured in the affective visualization, which was mostly on purpose. Part of the exploratory visualization was plotting each productivity session by date and I saw that I worked more near the end of the quarter and that in turn made me realize that the data I had was also a tangible representation of all of my work I've put into my courses over time and so I added the mountain range in the back to shift the focus towards being proud of all my work instead of comparison between groups.

I recived an extension on homework 3 so I did not have a first draft to show for in workshop, but I did show my exploratory data and tried to explain my vision and goal for the affective version. My peers liked my idea of focusing my affective visualization on community and how much work I've completed over the quarter. I ended up focusing more on the idea of accomplishment because I felt proud of all the data points, even if the Alone category has a lower average.

## b. Sharing your affective visualization

In week 10 workshop, I presented this affective data visualization:

![Fig. 2 - Affective data visualization](images/Affective.png)
